#!/usr/bin/env python

import os
import argparse

from job import Job, Task, apps

TURKEY_HOME = os.environ['TURKEY_HOME']

# TODO: https://argcomplete.readthedocs.io/en/latest/

parser = argparse.ArgumentParser(description='Turkey job runner')
subparsers = parser.add_subparsers(help='sub-command help', dest='cmd')

# Build subcommand
build = subparsers.add_parser('build', help='Build specified app')
build.add_argument('-a', '--app', help='App to build', default='all')
build.add_argument('-f', '--force', help='Force rebuild', action='store_true')

# Data subcommand
data = subparsers.add_parser('data', help='Download and unpack data')
data.add_argument('app', help='App to data for')

# Run subcommand
run = subparsers.add_parser('run', help='Run job')
run.add_argument('file', help='Job file')
run.add_argument('-w', '--working-dir', help='Working directory', default=os.path.join(TURKEY_HOME, 'jobs'))
run.add_argument('-o', '--out-dir', help='Output directory relative to working')
run.add_argument('-t', '--time', help='Time individual jobs', action='store_true')

# One-off run subcommand
one = subparsers.add_parser('one', help='Run one app')
one.add_argument('app', help='App to run')
one.add_argument('-n', '--num-threads', help='Number of threads', type=int, default=1)
one.add_argument('-c', '--conf', help='Configuration to run', default='test')
one.add_argument('-w', '--working-dir', help='Working directory', default=os.path.join(TURKEY_HOME, 'out'))
one.add_argument('-o', '--out-dir', help='Output directory relative to working')
one.add_argument('-e', '--executable', help='Executable if different from app name')

# TODO: Clean subcommand
clean = subparsers.add_parser('clean', help='Clean up directory')

args = parser.parse_args()

if args.cmd == 'build':
    if args.force:
        os.system('rm -rf %s' % os.path.join(TURKEY_HOME, 'build'))
    cwd = os.getcwd()
    os.system('mkdir -p build')
    os.chdir(os.path.join(TURKEY_HOME, 'build'))
    os.system('cmake .. -DMAKE=%s && make' % args.app)
    os.chdir(cwd)

elif args.cmd == 'data':
    os.system('./bin/data %s' % args.app)

elif args.cmd == 'run':
    job = Job(args)
    job.run()

elif args.cmd == 'one':
    if args.executable == None:
        args.executable = args.app

    task = Task([0, 0, args.app, args.conf, None, args.num_threads], args.working_dir, executable=args.executable)
    task.run()

    os.wait()
    os.system('stty sane')
else:
    print(parser.print_help())
