#!/usr/bin/env python

import os
import sys
import argparse
import subprocess

from job import Job, Task, apps

# TODO: https://argcomplete.readthedocs.io/en/latest/

parser = argparse.ArgumentParser(description='Turkey job runner')
parser.add_argument('-q', '--turkey-home', help='Turkey home directory')

subparsers = parser.add_subparsers(help='sub-command help', dest='cmd')

# Server commands
server = subparsers.add_parser('server', help='Handle server stuff')

# Client (the dummy one) commands
client = subparsers.add_parser('client', help='Do dummy client stuff')

# Build subcommand
build = subparsers.add_parser('build', help='Build specified app')
build.add_argument('-a', '--app', help='App to build', default='all')
build.add_argument('-f', '--force', help='Force rebuild', action='store_true')
build.add_argument('-e', '--cmake-executable', help='Path to cmake', default='cmake')
build.add_argument('-j', '--parallel', help='Parallelize', action='store_true')

# Data subcommand
data = subparsers.add_parser('data', help='Download and unpack data')
data.add_argument('app', help='App to data for')

# Run subcommand
run = subparsers.add_parser('run', help='Run job')
run.add_argument('file', help='Job file')
run.add_argument('-w', '--working-dir', help='Working directory')
run.add_argument('-o', '--out-dir', help='Output directory relative to working')
run.add_argument('-i', '--in-dir', help='Input directory relative to working. Where app directory lives')
run.add_argument('-t', '--time', help='Time individual jobs', action='store_false')

# One-off run subcommand
one = subparsers.add_parser('one', help='Run one app')
one.add_argument('app', help='App to run')
one.add_argument('-n', '--num-threads', help='Number of threads', type=int, default=1)
one.add_argument('-c', '--conf', help='Configuration to run', default='test')
one.add_argument('-w', '--working-dir', help='Working directory')
one.add_argument('-o', '--out-dir', help='Output directory relative to working')
one.add_argument('-i', '--in-dir', help='Input directory relative to working. WHere app directory lives')
one.add_argument('-e', '--executable', help='Executable if different from app name')
one.add_argument('-s', '--output_to_stdout', help='Dump to stdout instead of file', action='store_true')
one.add_argument('-m', '--mode', help='Which thread library to use', default='pthread')

# TODO: Clean subcommand
clean = subparsers.add_parser('clean', help='Clean up directory')

args = parser.parse_args()

if args.turkey_home == None:
    try:
        TURKEY_HOME = os.environ['TURKEY_HOME']
    except KeyError, e:
        print('ERROR: could not find TURKEY_HOME in environment. Please specify with -q.')
        sys.exit()
else:
    TURKEY_HOME = args.turkey_home

if args.cmd == 'server':
    subprocess.Popen([os.path.join(TURKEY_HOME, 'build/turkey_server')])
    os.wait()

elif args.cmd == 'client':
    subprocess.Popen([os.path.join(TURKEY_HOME, 'build/turkey_client')])
    os.wait()

elif args.cmd == 'build':
    if args.force:
        os.system('rm -rf %s' % os.path.join(TURKEY_HOME, 'build'))
    cwd = os.getcwd()
    os.chdir(TURKEY_HOME)
    os.system('mkdir -p build')
    os.chdir(os.path.join(TURKEY_HOME, 'build'))
    os.system('%s .. -DMAKE=%s && make %s' % (args.cmake_executable, args.app, '-j' if args.parallel else ''))
    os.chdir(cwd)

elif args.cmd == 'data':
    data_executable = os.path.join(TURKEY_HOME, 'bin/data')
    if args.app in apps:
        os.system('%s %s' % (data_executable, args.app))
    else:
        for app in apps:
            os.system('%s %s' % (data_executable, app))

elif args.cmd == 'run':
    if args.working_dir == None:
        args.working_dir = os.path.join(TURKEY_HOME, 'jobs')

    if args.in_dir == None:
        args.in_dir = TURKEY_HOME

    job = Job(args)
    job.run()

elif args.cmd == 'one':
    if args.executable == None:
        args.executable = args.app

    if args.working_dir == None:
        args.working_dir = os.path.join(TURKEY_HOME, 'out')

    if args.out_dir == None:
        args.out_dir = '.'

    if args.in_dir == None:
        args.in_dir = TURKEY_HOME

    out_dir = os.path.join(args.working_dir, args.out_dir)
    task = Task([0, 0, args.app, args.conf, args.mode, args.num_threads], out_dir, args.in_dir, executable=args.executable, output_to_stdout=args.output_to_stdout, TURKEY_HOME=TURKEY_HOME)
    task.run()

    os.wait()
    os.system('stty sane')
else:
    print(parser.print_help())
